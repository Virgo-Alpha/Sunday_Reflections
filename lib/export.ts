import { ReflectionAnswers, REFLECTION_QUESTIONS } from './reflections';
import { format } from 'date-fns';

export const exportToPDF = (
  answers: ReflectionAnswers,
  weekStartDate: Date,
  filename?: string
) => {
  // Only run in browser environment
  if (typeof window === 'undefined') {
    throw new Error('PDF export is only available in browser environment');
  }

  // Dynamically import jsPDF only in browser
  const jsPDF = require('jspdf');
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 20;
  const lineHeight = 7;
  let yPosition = 30;

  // Title
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Sunday Reflections', margin, yPosition);
  
  yPosition += 15;
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Week of ${format(weekStartDate, 'MMMM d, yyyy')}`, margin, yPosition);
  
  yPosition += 20;

  // Questions and answers
  REFLECTION_QUESTIONS.forEach((question, index) => {
    const questionKey = question.id as keyof ReflectionAnswers;
    const answer = answers[questionKey] || '';

    // Question
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    
    if (yPosition > 250) {
      pdf.addPage();
      yPosition = 30;
    }
    
    const questionLines = pdf.splitTextToSize(`${index + 1}. ${question.text}`, pageWidth - 2 * margin);
    pdf.text(questionLines, margin, yPosition);
    yPosition += questionLines.length * lineHeight + 5;

    // Answer
    pdf.setFont('helvetica', 'normal');
    if (answer) {
      const answerLines = pdf.splitTextToSize(answer, pageWidth - 2 * margin);
      answerLines.forEach((line: string) => {
        if (yPosition > 270) {
          pdf.addPage();
          yPosition = 30;
        }
        pdf.text(line, margin, yPosition);
        yPosition += lineHeight;
      });
    } else {
      pdf.text('(No response)', margin, yPosition);
      yPosition += lineHeight;
    }
    
    yPosition += 10;
  });

  // Footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'normal');
    pdf.text(
      `Generated by Sunday Reflections - Page ${i} of ${pageCount}`,
      margin,
      pdf.internal.pageSize.getHeight() - 10
    );
  }

  const finalFilename = filename || `reflection-${format(weekStartDate, 'yyyy-MM-dd')}.pdf`;
  pdf.save(finalFilename);
};

export const exportToWord = (
  answers: ReflectionAnswers,
  weekStartDate: Date,
  filename?: string
) => {
  // Only run in browser environment
  if (typeof window === 'undefined') {
    throw new Error('Word export is only available in browser environment');
  }

  let content = `Sunday Reflections\n`;
  content += `Week of ${format(weekStartDate, 'MMMM d, yyyy')}\n\n`;
  content += `${'='.repeat(50)}\n\n`;

  REFLECTION_QUESTIONS.forEach((question, index) => {
    const questionKey = question.id as keyof ReflectionAnswers;
    const answer = answers[questionKey] || '(No response)';

    content += `${index + 1}. ${question.text}\n`;
    content += `${'-'.repeat(question.text.length + 3)}\n`;
    content += `${answer}\n\n`;
  });

  content += `\n${'='.repeat(50)}\n`;
  content += `Generated by Sunday Reflections on ${format(new Date(), 'MMMM d, yyyy')}`;

  const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename || `reflection-${format(weekStartDate, 'yyyy-MM-dd')}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const exportToJSON = (
  answers: ReflectionAnswers,
  weekStartDate: Date,
  filename?: string
) => {
  // Only run in browser environment
  if (typeof window === 'undefined') {
    throw new Error('JSON export is only available in browser environment');
  }

  const exportData = {
    title: 'Sunday Reflections',
    weekStartDate: format(weekStartDate, 'yyyy-MM-dd'),
    weekDisplayDate: format(weekStartDate, 'MMMM d, yyyy'),
    exportDate: new Date().toISOString(),
    questions: REFLECTION_QUESTIONS.map((question, index) => ({
      id: question.id,
      number: index + 1,
      text: question.text,
      description: question.description,
      answer: answers[question.id as keyof ReflectionAnswers] || ''
    }))
  };

  const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename || `reflection-${format(weekStartDate, 'yyyy-MM-dd')}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};